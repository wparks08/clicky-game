{"version":3,"sources":["components/Navbar/index.js","components/Row/index.js","components/Col/index.js","components/Jumbotron/index.js","components/Header/index.js","components/Container/index.js","components/Gamepiece/index.js","components/Gameboard/index.js","components/Alert/index.js","components/Scoreboard/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","Row","props","children","Col","size","split","map","join","Jumbotron","Header","Container","type","defaultProps","Gamepiece","src","image","onClick","handleGamepieceClick","alt","Gameboard","images","img","key","id","Alert","variant","Scoreboard","round","score","highScore","message","text","Game","state","imagePaths","clicked","startNextRound","setState","shuffleImages","shuffledImages","Math","floor","random","length","push","filter","event","target","includes","concat","this","React","Component","App","document","title","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6dc8588c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n            <span className=\"navbar-brand mb-0 h1\">Clicky Game</span>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Row(props) {\r\n    return (\r\n        <div className=\"row\" {...props}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nRow.propTypes = {\r\n    children: PropTypes.any\r\n};\r\n\r\nexport default Row;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Col(props) {\r\n    let size = props.size\r\n        ? props.size\r\n              .split(\" \")\r\n              .map(size => \"col-\" + size)\r\n              .join(\" \")\r\n        : \"col\";\r\n\r\n    return (\r\n        <div className={size} {...props}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nCol.propTypes = {\r\n    size: PropTypes.string,\r\n    children: PropTypes.any\r\n};\r\n\r\nexport default Col;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Jumbotron(props) {\r\n    return (\r\n        <div className=\"jumbotron\" {...props}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nJumbotron.propTypes = {\r\n    children: PropTypes.any\r\n};\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport Row from \"../Row\";\r\nimport Col from \"../Col\";\r\nimport Jumbotron from \"../Jumbotron\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <Row className=\"mt-4\">\r\n            <Col size=\"sm-12\">\r\n                <Jumbotron>{props.children}</Jumbotron>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nHeader.propTypes = {\r\n    children: PropTypes.any\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Container(props) {\r\n    return (\r\n        <div className={`container${props.type === \"fluid\" ? \"-fluid\" : \"\"}`} {...props}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nContainer.defaultProps = {\r\n    type: \"\"\r\n};\r\n\r\nContainer.propTypes = {\r\n    children: PropTypes.any,\r\n    type: PropTypes.string\r\n};\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport path from \"path\";\r\n\r\nfunction Gamepiece(props) {\r\n    return (\r\n        <img\r\n            src={\".\" + props.image}\r\n            className=\"img-fluid img-thumbnail\"\r\n            onClick={props.handleGamepieceClick}\r\n            alt=\"Gamepiece\"\r\n        />\r\n    );\r\n}\r\n\r\nGamepiece.propTypes = {\r\n    image: PropTypes.string,\r\n    handleGamepieceClick: PropTypes.func\r\n};\r\n\r\nexport default Gamepiece;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Row from \"../Row\";\r\nimport Col from \"../Col\";\r\nimport Gamepiece from \"../Gamepiece\";\r\n\r\nfunction Gameboard(props) {\r\n    const images = props.images.map(img => {\r\n        return (\r\n            <Col size=\"sm-3\" key={img}>\r\n                <Gamepiece image={img} handleGamepieceClick={props.handleGamepieceClick} />\r\n            </Col>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div id=\"game\">\r\n            <Row>{images}</Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nGameboard.propTypes = {\r\n    images: PropTypes.array,\r\n    handleGamepieceClick: PropTypes.func\r\n};\r\n\r\nexport default Gameboard;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Alert(props) {\r\n    return <div className={`alert alert${props.variant ? \"-\" + props.variant : \"\"}`}>{props.children}</div>;\r\n}\r\n\r\nAlert.propTypes = {\r\n    variant: PropTypes.string,\r\n    children: PropTypes.any\r\n};\r\n\r\nexport default Alert;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Alert from \"../Alert\";\r\n\r\nfunction Scoreboard(props) {\r\n    return (\r\n        <div id=\"scoreboard\">\r\n            <h3>Scoreboard</h3>\r\n            <dl className=\"row\">\r\n                <dt className=\"col-sm-6 text-right\">Round: </dt>\r\n                <dd className=\"col-sm-6 text-left\">{props.round}</dd>\r\n                <dt className=\"col-sm-6 text-right\">Score: </dt>\r\n                <dd className=\"col-sm-6 text-left\">{props.score}</dd>\r\n                <dt className=\"col-sm-6 text-right\">High Score: </dt>\r\n                <dd className=\"col-sm-6 text-left\">{props.highScore}</dd>\r\n            </dl>\r\n            <Alert variant={props.message.variant}>{props.message.text}</Alert>\r\n        </div>\r\n    );\r\n}\r\n\r\nScoreboard.propTypes = {\r\n    round: PropTypes.number,\r\n    score: PropTypes.number,\r\n    highScore: PropTypes.number,\r\n    message: PropTypes.object\r\n};\r\n\r\nexport default Scoreboard;\r\n","import React from \"react\";\r\nimport Row from \"../Row\";\r\nimport Col from \"../Col\";\r\nimport Gameboard from \"../Gameboard\";\r\nimport images from \"../../data/images.json\";\r\nimport Scoreboard from \"../Scoreboard\";\r\n\r\nclass Game extends React.Component {\r\n    state = {\r\n        round: 1,\r\n        score: 0,\r\n        highScore: 0,\r\n        images: images.imagePaths,\r\n        clicked: [],\r\n        message: {\r\n            text: \"Click an image to begin!\",\r\n            variant: \"info\"\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.shuffleImages();\r\n    }\r\n\r\n    startNextRound = () => {\r\n        this.setState({\r\n            round: this.state.round + 1,\r\n            score: 0,\r\n            highScore: this.state.score > this.state.highScore ? this.state.score : this.state.highScore,\r\n            clicked: [],\r\n            message: {\r\n                text: \"Already clicked that one! Starting next round.\",\r\n                variant: \"danger\"\r\n            }\r\n        });\r\n    };\r\n\r\n    shuffleImages = () => {\r\n        //shuffle 'em\r\n        let images = this.state.images;\r\n        let shuffledImages = [];\r\n        while (images.length > 0) {\r\n            let image = images[Math.floor(Math.random() * images.length)];\r\n            shuffledImages.push(image);\r\n            images = images.filter(img => img !== image);\r\n        }\r\n\r\n        this.setState({\r\n            images: shuffledImages\r\n        });\r\n    };\r\n\r\n    handleGamepieceClick = event => {\r\n        let clicked = event.target.src;\r\n        if (this.state.clicked.includes(clicked)) {\r\n            this.startNextRound();\r\n        } else {\r\n            this.setState({\r\n                score: this.state.score + 1,\r\n                clicked: this.state.clicked.concat(clicked),\r\n                message: {\r\n                    text: \"Good job!\",\r\n                    variant: \"success\"\r\n                }\r\n            });\r\n            this.shuffleImages();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col size=\"md-9\">\r\n                    <Gameboard images={this.state.images} handleGamepieceClick={this.handleGamepieceClick} />\r\n                </Col>\r\n                <Col size=\"md-3\">\r\n                    <Scoreboard\r\n                        score={this.state.score}\r\n                        round={this.state.round}\r\n                        highScore={this.state.highScore}\r\n                        message={this.state.message}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nimport Container from \"./components/Container\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n    document.title = \"Clicky-Game\";\n\n    return (\n        <div className=\"App\">\n            <Navbar />\n            <Container>\n                <Header>\n                    <p>\n                        Click on a picture to start playing! Click each picture only once. Every click increases your\n                        score, and the game is over when you click a picture twice.\n                    </p>\n                </Header>\n                <Game />\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker === null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType !== null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}